library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <-sample(10)
ints
ints > 5
which()
which(7)
which(ints > 7)
any(ints<0)
all(ints>0)
#Module 9#
Sys.Date()
mean(c(2,4,5))
x
submit()
submit()
submit()
boring_function <- function(x) {
#x
}
submit()
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
# function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
# }
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
x
}
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
# function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
# }
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
x
}
submit()
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
# function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
# }
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
#x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector) / length(my_vector)
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
submit()
remainder <- function(num, divisor = 2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
submit()
remainder(5)
5
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
paste("START",..., "STOP", sep = "")
telegram <- function(...){
paste("START",..., "STOP", sep = "")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = "")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = "")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
telegram(7+10)
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place = "WVU Tech", adjective= "Depressing", noun= "Book")
"%p%" <- function(left, right){ # Remember to add arguments!
past(left, right, sep = " ")
}
submit()
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance"))
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
botplot(mpg ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:\\Users\\david\\Desktop\\Evolution\\Tasks\\Tasks_02")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)
write.csv(Data, "rawdata.csv", quote=F)
Data
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3,4]
Data[1:5, 1:3]
#in Data[a,b] a is what rows to display and b is what columns to display#
Feeds <- which(Data[,9] == "bottle")
#this command asked which data in column 9 equaled "bottle"... wait, what?!#
berenMilk <- Data[Feeds,]
head(berenMilk)
#there are 6 rows noting everytime the event bottle occurs#
Feeds <- which(Data[,"event"] == "bottle")
Feeds <- which(Data$event == "bottle")
#each comand is looking in the "event" column or column 9 for everytime the word "bottle appears. They are just different commands asking R to look in that column#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin ="2019-04-18")
Data$age <- dateID - dateID[which(Data$event == "birth")]
head(Data)
#but why did it only change in R? can we change it in excel?#
beren <- Data
beren2 <- beren
beren3 <- beren2[order(beren2$age),]
head(beren)
head(beren2)
head(beren3)
#why didn't "beren" show anything?#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
#Task 02b Starts here#
setwd()
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgMilk
#The unit for avg milk is ounces#
#COME BACK AND ANSWER THIS!!#
#[] single brackets are used to gather a subset of data from an object which in this case is feed.#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
avgFeed
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)" )
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)" )
par(las=1, mar=c(5,5,1,1), mpg=c(2,0.5,0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=avgFeed, lty=2, col'red')
abline(h=avgFeed, lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height = 4, width=4)
par(las=1, marc(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
cor.test(beren3$value[Feeds], beren3$age[Feeds])
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=avgFeed, lty=2, col='red')
dev.off()
#Question 1: For hypothesis one of course the weight of the food will add on to his weight so there will be a positive correlation. The second one I'm not too sure on although I would assume its because his intake of milk is increasing regardless of how much he sleeps
#Question 2: I couldn't really really tell you... I can interpret it but maybe it doesnt make for a good test.
source("http://jonsmitchell.com/code.plotFxn02b.R")
#Question 1: For hypothesis one of course the weight of the food will add on to his weight so there will be a positive correlation. The second one I'm not too sure on although I would assume its because his intake of milk is increasing regardless of how much he sleeps
#Question 2: I couldn't really really tell you... I can interpret it but maybe it doesnt make for a good test.
source("http://jonsmitchell.com/code/plotFxn02b.R")
pdf("http://jonsmitchell.com/code/plotFxn02b.R")
pdf("r02b-cumulativeMilkByTime.pdf")
source("http://jonsmitchell.com/code/plotFxn02b.R")
pdf("r02b-cumulativeMilkByTime.pdf")
